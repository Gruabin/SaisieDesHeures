# PHP as Linux Web App on Azure
# Build, package and deploy your PHP project to Azure Linux Web App.
# Add steps that run tests and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/php

trigger:
  branches:
    include:
      - pipeline-pr
#
variables:
  # Azure Resource Manager connection created during pipeline creation
  # azureSubscription: 'app-azuredevops-groupegruau-pipelines-prd'

  # # Web app name
  # webAppName: 'app-prd-gestion-receptions'

  # Agent VM image name
  vmImageName: 'ubuntu-20.04'

  # Environment name
  # environmentName: 'app-test-saisie-heure-cicd'

  # Root folder under which your composer.json file is available.
  rootFolder: $(System.DefaultWorkingDirectory)

  SERVERNAME: 'db-psql-tst-01.postgres.database.azure.com'          # Nom de votre serveur PostgreSQL
  DBUSER: 'psqladmin0806@db-psql-tst-01'      # Utilisateur administrateur de la base de données
  DBPASSWORD: '*b3$PmE7J!c#JtG8f*W#C8'    # Mot de passe de l'utilisateur administrateur


stages:

- stage: Build
  displayName: Build stage
  variables:
    phpVersion: '8.2'
  jobs:
  - job: BuildJob
    pool:
      vmImage: $(vmImageName)
    steps:
    # - script: |
    #     cp .env.prod .env
    #   displayName: 'Copy .env.prod to .env'

    - script: |
        sudo update-alternatives --set php /usr/bin/php$(phpVersion)
        sudo update-alternatives --set phar /usr/bin/phar$(phpVersion)
        sudo update-alternatives --set phpdbg /usr/bin/phpdbg$(phpVersion)
        sudo update-alternatives --set php-cgi /usr/bin/php-cgi$(phpVersion)
        sudo update-alternatives --set phar.phar /usr/bin/phar.phar$(phpVersion)
        php -version
      workingDirectory: $(rootFolder)
      displayName: 'Use PHP version $(phpVersion)'

    - script: composer install --no-ansi --no-interaction --no-plugins --no-progress --no-scripts --optimize-autoloader --prefer-dist
      workingDirectory: $(rootFolder)
      displayName: 'Composer install'

    - script: composer update
      workingDirectory: $(rootFolder)
      displayName: 'Composer update'

    - script: composer show
      workingDirectory: $(rootFolder)
      displayName: 'Show installed Composer packages'

    # Install the JavaScript packages with npm
    - script: npm install
      workingDirectory: $(rootFolder)
      displayName: "Run npm install"
    
    # Install the Symfony CLI to test for requirements
    - script: curl -sS https://get.symfony.com/cli/installer | bash
      workingDirectory: $(rootFolder)
      displayName: "Install SymfonyCLI"

    # Check for requirements
    - script: /home/vsts/.symfony5/bin/symfony check:requirements
      workingDirectory: $(rootFolder)
      displayName: "Symfony - Check requirements"
      
    # Build JavaScript assets
    - script: npm run build
      workingDirectory: $(rootFolder)
      displayName: "Build JS assets"
      
    # Generate cache file structure
    - script: composer dump-autoload --classmap-authoritative
      workingDirectory: $(rootFolder)
      displayName: "Generate cache file structure" 
    
    # Linter PHP CS fixer
    - script: php vendor/bin/php-cs-fixer fix
      workingDirectory: $(rootFolder)
      displayName:
        "Linter PHP CS fixer"

    # Linter rector
    - script: php vendor/bin/rector process src
      workingDirectory: $(rootFolder)
      displayName: "Linter Rector"

    # Linter twig CS template
    - script: php vendor/bin/twig-cs-fixer lint --fix templates
      workingDirectory: $(rootFolder)
      displayName: "Linter twig CS fixer"

    # Clear cache
    - script: php bin/console cache:clear --no-warmup
      workingDirectory: $(rootFolder)
      displayName: "Clear cache"

    # - script: php bin/console doctrine:database:create --env=test
    #   workingDirectory: $(rootFolder)
    #   displayName: "create database test"


    - task: AzureCLI@2
      displayName: Drop PostgreSQL Database
      inputs:
        azureSubscription: 'app-azuredevops-groupegruau-pipelines-tst'  # Remplacez par le nom de votre connexion de service Azure Resource Manager
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          export PGPASSWORD=$(DBPASSWORD)
          export DATABASE_URL="pgsql://$(DBUSER):$(DBPASSWORD)@$(SERVERNAME).postgres.database.azure.com:5432/postgres?sslmode=require"
          php bin/console doctrine:schema:drop --env=test


    # - script: php bin/console doctrine:schema:create --env=test
    #   workingDirectory: $(rootFolder)
    #   displayName: "create schema"

    # - script: |
    #     echo "yes" | php bin/console doctrine:fixtures:load --env=test
    #   workingDirectory: $(rootFolder)
    #   displayName: "Load fixture"


    # - script: php bin/phpunit
    #   workingDirectory: $(rootFolder)
    #   displayName: "make test"

    # - script: php bin/console doctrine:migrations:migrate --no-interaction
    #   workingDirectory: $(rootFolder)
    #   displayName: "migration migrate"

    # - task: PowerShell@2
    #   inputs:
    #     targetType: 'inline'
    #     script: |
    #       $output = php bin/console doctrine:schema:update --dump-sql
    #       Write-Host "Output of doctrine:schema:update --dump-sql:"
    #       Write-Host $output
    #       $output = $output -replace "DROP TABLE doctrine_migration_versions;", ""
    #       $output = $output.Trim()
    #       Write-Host "Output after removing 'DROP TABLE doctrine_migration_versions;':"
    #       Write-Host $output
    #       if ($output -eq "") {
    #           Write-Host "Aucune migration nécessaire, car la seule instruction SQL est la suppression de la table doctrine_migration_versions."
    #       } else {
    #           Write-Host "Migration nécessaire"
    #           php bin/console make:migration --no-interaction
    #           php bin/console doctrine:migrations:migrate --no-interaction
    #       }
    #   displayName: 'Check and create migration if necessary' 

    # # Mend 
    # - task: WhiteSource@21
    #   displayName: "Mend"
    #   inputs:
    #     cwd: '$(System.DefaultWorkingDirectory)'
    #              php bin/console make:migration --no-interaction
    #       php bin/console doctrine:migrations:migrate --no-interaction
    
      
    # - task: ArchiveFiles@2
    #   displayName: 'Archive files'
    #   inputs:
    #     rootFolderOrFile: '$(rootFolder)'
    #     includeRootFolder: false
    #     archiveType: zip
    #     archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
    #     replaceExistingArchive: true

    # - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
    #   displayName: 'Upload package'
    #   artifact: drop

# - stage: Deploy
#   displayName: "Deploy Web App"
#   dependsOn: Build
#   condition: succeeded()
#   jobs:
#   - deployment: DeploymentJob
#     pool:
#       vmImage: $(vmImageName)
#     environment: $(environmentName)
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - task: AzureRmWebAppDeployment@4
#             displayName: "Déploiement de l'application"
#             inputs:
#               ConnectionType: 'AzureRM'
#               azureSubscription: '$(azureSubscription)'
#               appType: 'webAppLinux'
#               WebAppName: '$(webAppName)'
#               packageForLinux: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
#               StartupCommand: '/home/site/wwwroot/startup.sh'