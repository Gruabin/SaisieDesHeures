# PHP as Linux Web App on Azure
# Build, package and deploy your PHP project to Azure Linux Web App.
# Add steps that run tests and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/php
#
trigger:
  - none

variables:

  # Agent VM image name
  vmImageName: "ubuntu-24.04"

  # PHP version
  phpVersion: "8.3"

  # Root folder under which your composer.json file is available.
  rootFolder: $(System.DefaultWorkingDirectory)

stages:
- stage: Build
  displayName: Build stage
  jobs:
    - job: BuildJob
      pool:
        vmImage: $(vmImageName)
      steps:
        - script: |
            sudo update-alternatives --set php /usr/bin/php$(phpVersion)
            sudo update-alternatives --set phar /usr/bin/phar$(phpVersion)
            sudo update-alternatives --set phpdbg /usr/bin/phpdbg$(phpVersion)
            sudo update-alternatives --set php-cgi /usr/bin/php-cgi$(phpVersion)
            sudo update-alternatives --set phar.phar /usr/bin/phar.phar$(phpVersion)
            php -version
          workingDirectory: $(rootFolder)
          displayName: "Use PHP version $(phpVersion)"

        #install les packages Symfony
        - script: composer install --no-ansi --no-interaction --no-plugins --no-progress --no-scripts --optimize-autoloader --prefer-dist
          workingDirectory: $(rootFolder)
          displayName: "Composer install"
        
        #update les packages Symfony
        - script: composer update
          workingDirectory: $(rootFolder)
          displayName: 'Composer update'

        # Install the JavaScript packages with npm
        - script: npm install
          workingDirectory: $(rootFolder)
          displayName: "Run npm install"

        # Install the Symfony CLI to test for requirements
        - script: curl -sS https://get.symfony.com/cli/installer | bash
          workingDirectory: $(rootFolder)
          displayName: "Install SymfonyCLI"

        # Check for requirements
        - script: /home/vsts/.symfony5/bin/symfony check:requirements
          workingDirectory: $(rootFolder)
          displayName: "Symfony - Check requirements"

        # Build JavaScript assets
        - script: npm run build
          workingDirectory: $(rootFolder)
          displayName: "Build JS assets"

        # Generate cache file structure
        - script: composer dump-autoload --classmap-authoritative
          workingDirectory: $(rootFolder)
          displayName: "Generate cache file structure"

        # Clear cache
        - script: php bin/console cache:clear --no-warmup
          workingDirectory: $(rootFolder)
          displayName: "Clear cache"

        # Linter PHP CS fixer
        # * Actuellement indisponible en php 8.4
        - script: php vendor/bin/php-cs-fixer fix
          workingDirectory: $(rootFolder)
          displayName: "Linter PHP CS fixer"

        # Linter rector
        - script: php vendor/bin/rector process src
          workingDirectory: $(rootFolder)
          displayName: "Linter Rector"

        # Linter twig CS template
        - script: php vendor/bin/twig-cs-fixer lint --fix templates
          workingDirectory: $(rootFolder)
          displayName: "Linter twig CS fixer"

        # Mend
        - task: WhiteSource@21
          displayName: "Mend"
          inputs:
            cwd: '$(System.DefaultWorkingDirectory)'

        # PHPStan analyse
        - script: vendor/bin/phpstan analyse src --memory-limit=2G
          workingDirectory: $(rootFolder)
          displayName: "PHPStan analyse"
          continueOnError: true

        # Démarrage du conteneur pour la bdd de test
        - script: |
            cd pipelines/
            docker compose up -d
            cd ..
          workingDirectory: $(rootFolder)
          displayName: 'Exécuter docker-compose up'

        # Création de la bdd de test
        - script: php bin/console doctrine:database:create --env=test
          workingDirectory: $(rootFolder)
          displayName: "create database test"

        # Création du schéma en se basant sur les entité
        - script: php bin/console doctrine:schema:create --env=test
          workingDirectory: $(rootFolder)
          displayName: "create schema"

        # Mise en place des données de test
        - script: |
            echo "yes" | php bin/console doctrine:fixtures:load --env=test
          workingDirectory: $(rootFolder)
          displayName: "Load fixture"

        # Execution des tests
        - script: php -d xdebug.mode=coverage bin/phpunit --coverage-clover='var/coverage/clover.xml' --coverage-html='var/coverage/html' --log-junit='var/coverage/phpunit-results.xml'
          workingDirectory: $(rootFolder)
          displayName: "Tests"

        # Démontage du conteneur
        - script: docker compose down
          workingDirectory: $(rootFolder)
          displayName: "docker down"

        # Publication de la couverture de code
        - task: PublishCodeCoverageResults@2
          inputs:
            codeCoverageTool: 'Cobertura'
            summaryFileLocation: 'var/coverage/clover.xml'
            reportDirectory: 'var/coverage/html'
            failIfCoverageEmpty: true

        - task: PublishTestResults@2
          inputs:
            testResultsFiles: '**/TEST-*.xml'
            failTaskOnFailedTests: true
            testRunTitle: 'PHPUnit Test Results'
