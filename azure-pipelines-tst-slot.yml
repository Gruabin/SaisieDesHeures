# PHP as Linux Web App on Azure
# Build, package and deploy your PHP project to Azure Linux Web App.
# Add steps that run tests and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/php

trigger:
  - Test-Slot

variables:
  # Azure Resource Manager connection created during pipeline creation
  azureSubscription: "app-azuredevops-groupegruau-pipelines-prd"

  # Web app name
  webAppName: "app-gruau-prd-test-slot"

  # Agent VM image name
  vmImageName: "ubuntu-latest"

  # Environment name
  environmentName: "app-gruau-prd-saisie-heures"

  # Resource group name
  rgName: "rg-prd-webapps"

  # Slot name
  slotName: "temp"

  # Root folder under which your composer.json file is available.
  rootFolder: $(System.DefaultWorkingDirectory)

stages:
  - stage: Build
    displayName: Build stage
    variables:
      phpVersion: "8.2"
    jobs:
      - job: BuildJob
        pool:
          vmImage: $(vmImageName)
        steps:
          - script: |
              sudo update-alternatives --set php /usr/bin/php$(phpVersion)
              sudo update-alternatives --set phar /usr/bin/phar$(phpVersion)
              sudo update-alternatives --set phpdbg /usr/bin/phpdbg$(phpVersion)
              sudo update-alternatives --set php-cgi /usr/bin/php-cgi$(phpVersion)
              sudo update-alternatives --set phar.phar /usr/bin/phar.phar$(phpVersion)
              php -version
            workingDirectory: $(rootFolder)
            displayName: "Use PHP version $(phpVersion)"

          - script: composer install --no-ansi --no-interaction --no-plugins --no-progress --no-scripts --optimize-autoloader --prefer-dist
            workingDirectory: $(rootFolder)
            displayName: "Composer install"

          # Install the JavaScript packages with Yarn
          - script: yarn install
            workingDirectory: $(rootFolder)
            displayName: "Run yarn install"

          # Install the Symfony CLI to test for requirements
          - script: curl -sS https://get.symfony.com/cli/installer | bash
            workingDirectory: $(rootFolder)
            displayName: "Install SymfonyCLI"

          # Check for requirements
          - script: /home/vsts/.symfony5/bin/symfony check:requirements
            workingDirectory: $(rootFolder)
            displayName: "Symfony - Check requirements"

          # Build JavaScript assets
          - script: yarn build
            workingDirectory: $(rootFolder)
            displayName: "Build JS assets"

          # Generate cache file structure
          - script: composer dump-autoload --classmap-authoritative
            workingDirectory: $(rootFolder)
            displayName: "Generate cache file structure"

          # Clear cache
          - script: php bin/console cache:clear
            workingDirectory: $(rootFolder)
            displayName: "Clear cache"

          # Linter PHP CS fixer
          - script: php vendor/bin/php-cs-fixer fix
            workingDirectory: $(rootFolder)
            displayName:
              "Linter PHP CS fixer"

          # Linter rector
          - script: php vendor/bin/rector process src
            workingDirectory: $(rootFolder)
            displayName: "Linter Rector"

          # Linter twig CS template
          - script: php vendor/bin/twig-cs-fixer lint --fix templates
            workingDirectory: $(rootFolder)
            displayName: "Linter twig CS fixer"

          - task: ArchiveFiles@2
            displayName: "Archive files"
            inputs:
              rootFolderOrFile: "$(rootFolder)"
              includeRootFolder: false
              archiveType: zip
              archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
              replaceExistingArchive: true

          - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
            displayName: "Upload package"
            artifact: drop

  - stage: Deploy
    displayName: "Deploy Web App"
    dependsOn: Build
    condition: succeeded()
    jobs:
      - deployment: DeploymentJob
        pool:
          vmImage: $(vmImageName)
        environment: $(environmentName)
        strategy:
          runOnce:
            deploy:
              steps:
              - task: AzureCLI@2
                displayName: "Création du Slot"
                inputs:
                  azureSubscription: '$(azureSubscription)'
                  scriptType: 'pscore'
                  scriptLocation: 'inlineScript'
                  inlineScript: 'az webapp deployment slot create --name $(webAppName) --resource-group $(rgName) --slot $(slotName)'
              
              - task: AzureRmWebAppDeployment@4
                displayName: "Déploiement de l'application"
                inputs:
                  ConnectionType: 'AzureRM'
                  azureSubscription: '$(azureSubscription)'
                  appType: 'webAppLinux'
                  WebAppName: '$(webAppName)'
                  deployToSlotOrASE: true
                  ResourceGroupName: '$(rgName)'
                  SlotName: '$(slotName)'
                  packageForLinux: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
                  StartupCommand: '/home/site/wwwroot/startup.sh'
              
              - task: AzureAppServiceManage@0
                displayName: "Swap des Slots"
                inputs:
                  azureSubscription: '$(azureSubscription)'
                  Action: 'Swap Slots'
                  WebAppName: '$(webAppName)'
                  ResourceGroupName: '$(rgName)'
                  SourceSlot: '$(slotName)'
              
              - task: AzureAppServiceManage@0
                displayName: "Suppression du Slot"
                inputs:
                  azureSubscription: '$(azureSubscription)'
                  Action: 'Delete Slot'
                  WebAppName: '$(webAppName)'
                  ResourceGroupName: '$(rgName)'
                  Slot: '$(slotName)'